package com.manuanand.clouddrive;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.server.ResponseStatusException;

@Controller	// This means that this class is a Controller
@RequestMapping(path="/file") // This means URL's start with /file (after Application path)
public class FileController {
	@Autowired // This means to get the bean called fileRepository
			   // Which is auto-generated by Spring, we will use it to handle the data
	private FileRepository fileRepository;
	
	@Autowired
	private UserRepository userRepository;
	
	
	@GetMapping(path="/")
	public @ResponseBody Iterable<File> getAllFiles() {
		
		// This returns a JSON or XML with the users
		return fileRepository.findAll();
	}

	@GetMapping(path="/getUserFiles/{userId}")
	public @ResponseBody Iterable<File> getUserFiles(@PathVariable Integer userId) {
		
		return fileRepository.findByUserId(userId);
	}
	
	@PostMapping(path="/getRemoteFile")
	public @ResponseBody Iterable<File> getRemoteFile(@RequestParam Integer userId, @RequestParam String remotePath) {
		
		return fileRepository.findByUserIdAndRemotePath(userId, remotePath);
	}

//	@GetMapping(path="/getFileByVersion")
//	public @ResponseBody Iterable<File> getFileByVersion(@RequestParam int version) {
//		
//		return fileRepository.findByVersion(version);
//	}

	@GetMapping(path="/{id}")
	public @ResponseBody File getSpecificFile(@PathVariable String id) {
		
		Integer fileId = null;
		try {
			fileId = Integer.parseInt(id);
		} catch (NumberFormatException ex) {
			return null;
		}

		Optional<File> file = fileRepository.findById(fileId);
		if (!file.isEmpty()) {
			return file.get();
		} 

		return null;
	}

	@GetMapping(path="/deleteAll")
	public @ResponseBody void deleteAllFiles() {
		
		// This returns a JSON or XML with the users
		fileRepository.deleteAll();
	}
}